#!/usr/bin/env python
# -*- coding: utf8 -*-

# https://github.com/mxgxw/MFRC522-python

import os
import socket
import RPi.GPIO as GPIO
import requests
import MFRC522
import signal


url = "http://127.0.0.1:5000/set_stat"


continue_reading = True

# Capture SIGINT for cleanup when the script is aborted


def end_read(signal, frame):
    global continue_reading
    print("Ctrl+C captured, ending read.")
    continue_reading = False
    GPIO.cleanup()


# Hook the SIGINT
signal.signal(signal.SIGINT, end_read)

# Create an object of the class MFRC522
MIFAREReader = MFRC522.MFRC522()

# Welcome message
print("Welcome to the MFRC522 data read example")
print("Press Ctrl-C to stop.")


print(os.getcwd())

# This loop keeps checking for chips. If one is near it will get the UID and authenticate
while continue_reading:

    # Scan for cards
    (status, TagType) = MIFAREReader.MFRC522_Request(MIFAREReader.PICC_REQIDL)

    # If a card is found
    if status == MIFAREReader.MI_OK:
        print("Card detected")

    # Get the UID of the card
    (status, uid) = MIFAREReader.MFRC522_Anticoll()

    # If we have the UID, continue
    if status == MIFAREReader.MI_OK:

        # Print UID
        print("Card read UID: %s,%s,%s,%s" % (uid[0], uid[1], uid[2], uid[3]))
        print(uid)
        # This is the default key for authentication
        key = [0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]
    ######### check if the card vaild #########
        # Select the scanned tag
        MIFAREReader.MFRC522_SelectTag(uid)

        # Authenticate
        status = MIFAREReader.MFRC522_Auth(
            MIFAREReader.PICC_AUTHENT1A, 8, key, uid)

        # Check if authenticated
        if status == MIFAREReader.MI_OK:
            MIFAREReader.MFRC522_Read(8)
            MIFAREReader.MFRC522_StopCrypto1()
        else:
            print("Authentication error")
    ######### check if the card authorized #########
        with open("GPIO_code/cards_id", "r") as open_file:
            vaild_cards = []
            for raw_vaild_card in open_file.readlines():

                card = raw_vaild_card.split(',')
                card.pop()

                if len(card) != 5:
                    break
                card = [int(digit) for digit in card]
                vaild_cards.append([card])
        if [uid] in vaild_cards:
            requests.post(url, {'data': 3})
        else:
            requests.post(url, {'data': 4})
